import { app, BrowserWindow, ipcMain, IpcMainEvent } from 'electron';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_ABOUT_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      nodeIntegration: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

const createAboutWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 300,
    width: 400,
    webPreferences: {
      nodeIntegration: true,
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL("../public/about.html");
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
/* app.on('ready', createWindow); */

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

/* this.registerIpcChannels(ipcChannels);

private registerIpcChannels(ipcChannels: IpcChannelInterface[]) {
  ipcChannels.forEach(channel => ipcMain.on(channel.getName(), (event, request) => channel.handle(event, request)));
} */
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

/* function giveData() {
  return new Promise( (res) => {
    setTimeout(res, 2000, '---BigData---')
  })
} */


/* ipcMain.handle("GET/data", async (event: IpcMainEvent, args) => {
  return await giveData()
})  */

app.whenReady().then(() => {
  ipcMain.handle("get:data", async (evt, ...args) => {
    let result = "";
    return await new Promise(res => setTimeout(() => {
      result = "BigData";
      res(result)
    }, 5000))
  })

/*   ipcMain.on("get:data", (evt) => {
    evt.sender.send("send:data", "BigData")
  }) */
  ipcMain.on("open:window", (evt) => {
    createAboutWindow();
    evt.sender.send("send:data","About window has opened from the server");     /* let win = new BrowserWindow({show: false});
    win.on('close', function () {win = null});
    win.once('ready-to-show', () => {win.show})
    evt.sender.send("send:data","About window has opened from the server") */
  })
  createWindow();
})
