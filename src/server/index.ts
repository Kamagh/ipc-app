import { app, BrowserWindow, ipcMain, IpcMainEvent } from 'electron';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const ABOUT_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const ABOUT_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

let aboutWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();

}

const createWindow = (): void => {
  // Create the browser window.
  //const windows = new Set();
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};
const createAboutWindow = (): void => {
  // Create the browser window.

  aboutWindow = new BrowserWindow({
    height: 300,
    width: 400,
    webPreferences: {
      preload: ABOUT_WINDOW_PRELOAD_WEBPACK_ENTRY
    }
  });

  // and load the index.html of the app.
  aboutWindow.loadURL(ABOUT_WINDOW_WEBPACK_ENTRY);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
/* app.on('ready', createWindow); */

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.whenReady().then(() => {
  ipcMain.handle("get:data", async (evt, ...args) => {
    let result = "";
    return await new Promise(res => setTimeout(() => {
      result = "BigData";
      res(result)
    }, 5000))
  })

  ipcMain.on("open:window", (evt) => {
    if (aboutWindow) {
      evt.sender.send("send:data", "About window is already opened");
      return;
    } else {
      evt.sender.send("send:data", "About window was closed");
    }
    createAboutWindow();
    evt.sender.send("send:data", "About window has opened from the server");

    aboutWindow.on('close', () => {
      aboutWindow = null;
      evt.sender.send("send:data", "About window was closed");
    })
  })
  createWindow();
})
